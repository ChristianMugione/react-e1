
//

E1: Landing Page
Para esta entrega, la primera del mÃ³dulo de React, deberÃ¡n realizar una Landing Page que cumpla con los siguiente requisitos:

âœ… DeberÃ¡ tener un Header con su navbar.
ğŸ‘‰ DeberÃ¡ tener un Hero representativo de su pÃ¡gina.
ğŸ‘‰ DeberÃ¡ tener una secciÃ³n de productos destacados(Iteraremos esta secciÃ³n en prÃ³ximas entregas para que desde aquÃ­ se pueda navegar a una pÃ¡gina de productos dentro de nuestra web).
âœ… DeberÃ¡ tener un Footer
ğŸ‘‰ 100% responsiva.
âœ… DeberÃ¡ estar Deployada en Vercel
----------------------------------------------------------------------------
E2: Context y React Router
En esta entrega iteraremos sobre la realizado en la entrega NÂº1:

âœ… Ahora sÃ­, utilizando context, haremos funcional el menÃº desplegable del header en responsive.
âœ… DeberÃ¡n crear una pÃ¡gina de "About" , "Sobre nosotros" o de caracter similar a estas.
âœ… PÃ¡gina de "productos"
âœ… PÃ¡gina de contacto campos "nombre", "apellido" , "email" y "asunto" (por ahora, sin validaciones).
âœ… Todas las pÃ¡ginas (landing de la E1 incluida) deben estar vinculadas entre sÃ­ mediante el uso de React Router.

----------------------------------------------------------------------------
E3: LÃ³gica de productos y carrito - Redux Toolkit

âœ… abrir menu cierra carrito y viceversa
âœ… Renderizar los productos de manera dinÃ¡mica en la secciÃ³n de productos que ya tenÃ­an lista de la entrega anterior.
âœ… Realizar la lÃ³gica de filtros.
âœ… Agregar productos al carrito de manera dinÃ¡mica.
âœ… Manejar las cantidades del producto elegido en el carrito de manera dinÃ¡mica.
âœ… Agregar una funcionalidad para borrar productos del carrito de manera individual o todos juntos de manera grupal.
âœ… Agregar funcionalidad de finalizar compra (Se debe vaciar el carrito)
âœ… agregar productos, borrar prods y finalizar compra, deberÃ¡n confirmarse con un modal (No "alerts" ni "confirms").

----------------------------------------------------------------------------
Proyecto Integrador | React JS

La web que entreguen deberÃ¡ contar con la funcionalidades pedidas en las entregas 1, 2 y 3 , estas eran:
ğŸ‘‰ SecciÃ³n de productos destacados que lleve a la pÃ¡gina de productos de alguna manera (por ejemplo, un botÃ³n).
ğŸ‘‰ Utilizando Formik, deberÃ¡n realizar la validaciÃ³n del formulario de contacto. El mismo no debe enviar nada, pero si cumplir con la validaciÃ³n de manera correcta de cada uno de los campos y renderizar un mensaje de envio correcto en caso de que todos los campos pasen dicha validaciÃ³n.
ğŸ‘‰ Agregar la funcionalidad de persistencia de datos (productos del carrito) a nuestra app web.
ğŸ‘‰ DiseÃ±o responsive de todas las pÃ¡ginas.


âœ… Header con su navbar funcional en responsive con API Context.
âœ… Hero representativo de su pÃ¡gina.
âœ… Footer.
âœ… Una pÃ¡gina de "Sobre nosotros".
âœ… Una pÃ¡gina de "Productos" , con los productos renderizados dinÃ¡micamente, lÃ³gica de filtros, agregado de productos al carrito, manejo de cantidades en carrito y la posibilidad de vaciar el carrito, borrar individualmente cada producto y realizar compra(Todas estas acciones deben tener un modal de confirmaciÃ³n).
âœ… Una secciÃ³n de contacto en la cual tienen que tener al menos un formulario de contacto con los campos "nombre", "apellido" , "email" y "asunto".
âœ… Todas las pÃ¡ginas vinculadas entre si mediante React Router.
 
EXTRA:
ğŸ‘‰ Migrar el context del menÃº a Redux Toolkit.
ğŸ‘‰ Agregar un sistema de login y registro.
ğŸ‘‰ Agregar una pÃ¡gina de checkout al realizar la compra.
ğŸ‘‰ Agregar una pÃ¡gina de producto para cada producto individual
ğŸ‘‰ Agregar envio de mail desde el formulario de contacto, usando API's como emailJS.

Mensaje de entrega:
